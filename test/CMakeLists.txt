
IF(NOT DEFINED BA_PACKAGE_TEST_NAME)
    MESSAGE(FATAL_ERROR "Please specify test to run by CMake variable BA_PACKAGE_TEST_NAME")
ENDIF()

SET(TEST_PATH "${CMAKE_CURRENT_LIST_DIR}/tests_list/${BA_PACKAGE_TEST_NAME}")
IF(NOT EXISTS "${TEST_PATH}")
    MESSAGE(FATAL_ERROR "Cannot find test ${TEST_PATH}")
ENDIF()

SET(PROJECT_NAME MyTestApp)

PROJECT(${PROJECT_NAME} LANGUAGES C)
CMAKE_MINIMUM_REQUIRED(VERSION 3.21)

FUNCTION(BUILD_INSTALL_DEPENDENCY install_dir version dependency_cmake_path)
    EXECUTE_PROCESS(
        COMMAND ${CMAKE_COMMAND} "-DCMAKE_BUILD_TYPE=Release" "-DLIBRARY_VERSION=${version}" "-DCMAKE_INSTALL_PREFIX=${install_dir}" .
        WORKING_DIRECTORY "${dependency_cmake_path}"
        RESULT_VARIABLE result
    )
    IF(NOT result EQUAL 0)
        MESSAGE(FATAL_ERROR "Cannot configure dependency ${dependency_cmake_path}")
    ENDIF()
    FIND_PROGRAM(GNUMake make)
    EXECUTE_PROCESS(
        COMMAND  ${GNUMake} install
        WORKING_DIRECTORY "${dependency_cmake_path}"
    )
    IF(NOT result EQUAL 0)
        MESSAGE(FATAL_ERROR "Cannot compile dependency ${dependency_cmake_path}")
    ENDIF()
ENDFUNCTION()

SET(PROJECT_VERSION 1.5.89)
FIND_PACKAGE(CMLIB COMPONENTS CMDEF REQUIRED)

SET(DEPENDENCY_INSTALL_DIR "${CMAKE_CURRENT_LIST_DIR}/DependencyRoot")
BUILD_INSTALL_DEPENDENCY("${DEPENDENCY_INSTALL_DIR}" 1.2.3 ${CMAKE_CURRENT_LIST_DIR}/lib/shared_library_for_prerun)
BUILD_INSTALL_DEPENDENCY("${DEPENDENCY_INSTALL_DIR}" 5.67.1 ${CMAKE_CURRENT_LIST_DIR}/lib/shared_library)

INCLUDE("${TEST_PATH}")
IF(NOT COMMAND TEST_PRERUN)
    MESSAGE(FATAL_ERROR "Test is not valid. TEST_PRERUN function not found.")
ENDIF()
TEST_PRERUN(
    VERSION     "1.2.3"
    INSTALL_DIR "${DEPENDENCY_INSTALL_DIR}/lib/shared_library_for_prerun"
    LIBRARY_NAME shared_library_for_prerun
)



LIST(APPEND CMAKE_PREFIX_PATH "${DEPENDENCY_INSTALL_DIR}")
FIND_PACKAGE(shared_library  REQUIRED)
FIND_LIBRARY(
    shared_library_for_prerun shared_library_for_prerun
    HINTS ${DEPENDENCY_INSTALL_DIR}/${CMDEF_LIBRARY_INSTALL_DIR}/shared_library_for_prerun
    REQUIRED
    NO_CACHE
)

CMDEF_ADD_EXECUTABLE(
    TARGET ${PROJECT_NAME}
    SOURCES main.c
    VERSION ${PROJECT_VERSION}
)
TARGET_LINK_LIBRARIES(${PROJECT_NAME} PUBLIC shared_library-shared shared_library_for_prerun-shared)


CMDEF_INSTALL(TARGET ${PROJECT_NAME})

# Create a package
CMDEF_PACKAGE(
    MAIN_TARGET ${PROJECT_NAME}
    VERSION     ${PROJECT_VERSION}
)

INCLUDE("${CMAKE_CURRENT_LIST_DIR}/../BA_PACKAGE_DEPS.cmake")

BA_PACKAGE_DEPS_INSTALL_IMPORTED(
    ${PROJECT_NAME}
)
BA_PACKAGE_DEPS_SET_TARGET_RPATH(${PROJECT_NAME})

SET(CPACK_GENERATOR ZIP)
INCLUDE(CPack)